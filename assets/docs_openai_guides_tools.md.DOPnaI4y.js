import{_ as i,c as a,o as e,a2 as t}from"./chunks/framework.DDIT__tB.js";const c=JSON.parse('{"title":"Built-in tools","description":"","frontmatter":{},"headers":[],"relativePath":"docs/openai/guides/tools.md","filePath":"docs/openai/guides/tools.md","lastUpdated":1748071461000}'),n={name:"docs/openai/guides/tools.md"};function l(p,s,o,h,r,k){return e(),a("div",null,s[0]||(s[0]=[t(`<h1 id="built-in-tools" tabindex="-1">Built-in tools <a class="header-anchor" href="#built-in-tools" aria-label="Permalink to &quot;Built-in tools&quot;">​</a></h1><p>Use built-in tools like web search and file search to extend the model&#39;s capabilities.</p><p>When generating model responses, you can extend model capabilities using built-in <strong>tools</strong>. These tools help models access additional context and information from the web or your files. The example below uses the <a href="/docs/openai/guides/tools-web-search">web search tool</a> to use the latest information from the web to generate a model response.</p><p>Include web search results for the model response</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> OpenAI </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;openai&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> client</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> OpenAI</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> response</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> client.responses.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">create</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    model: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;gpt-4.1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    tools: [ { type: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;web_search_preview&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } ],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    input: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;What was a positive news story from today?&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(response.output_text);</span></span></code></pre></div><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> openai </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> OpenAI</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">client </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> OpenAI()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">response </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> client.responses.create(</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">    model</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;gpt-4.1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">    tools</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[{</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;type&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;web_search_preview&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}],</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">    input</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;What was a positive news story from today?&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(response.output_text)</span></span></code></pre></div><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">curl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;https://api.openai.com/v1/responses&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    -H</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Content-Type: application/json&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    -H</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Authorization: Bearer </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$OPENAI_API_KEY</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    -d</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;{</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &quot;model&quot;: &quot;gpt-4.1&quot;,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &quot;tools&quot;: [{&quot;type&quot;: &quot;web_search_preview&quot;}],</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &quot;input&quot;: &quot;what was a positive news story from today?&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    }&#39;</span></span></code></pre></div><h2 id="available-tools" tabindex="-1">Available tools <a class="header-anchor" href="#available-tools" aria-label="Permalink to &quot;Available tools&quot;">​</a></h2><p>Here&#39;s an overview of the tools available in the OpenAI platform—select one of them for further guidance on usage.</p><p>[</p><p>Function calling</p><p>Call custom code to give the model access to additional data and capabilities.</p><p>](/docs/openai/guides/function-calling)[</p><p>Web search</p><p>Include data from the Internet in model response generation.</p><p>](/docs/openai/guides/tools-web-search)[</p><p>File search</p><p>Search the contents of uploaded files for context when generating a response.</p><p>](/docs/openai/guides/tools-file-search)[</p><p>Computer use</p><p>Create agentic workflows that enable a model to control a computer interface.</p><p>](/docs/openai/guides/tools-computer-use)</p><h2 id="usage-in-the-api" tabindex="-1">Usage in the API <a class="header-anchor" href="#usage-in-the-api" aria-label="Permalink to &quot;Usage in the API&quot;">​</a></h2><p>When making a request to generate a <a href="/docs/api-reference/responses/create">model response</a>, you can enable tool access by specifying configurations in the <code>tools</code> parameter. Each tool has its own unique configuration requirements—see the <a href="#available-tools">Available tools</a> section for detailed instructions.</p><p>Based on the provided <a href="/docs/openai/guides/text">prompt</a>, the model automatically decides whether to use a configured tool. For instance, if your prompt requests information beyond the model&#39;s training cutoff date and web search is enabled, the model will typically invoke the web search tool to retrieve relevant, up-to-date information.</p><p>You can explicitly control or guide this behavior by setting the <code>tool_choice</code> parameter <a href="/docs/api-reference/responses/create">in the API request</a>.</p><h3 id="function-calling" tabindex="-1">Function calling <a class="header-anchor" href="#function-calling" aria-label="Permalink to &quot;Function calling&quot;">​</a></h3><p>In addition to built-in tools, you can define custom functions using the <code>tools</code> array. These custom functions allow the model to call your application&#39;s code, enabling access to specific data or capabilities not directly available within the model.</p><p>Learn more in the <a href="/docs/openai/guides/function-calling">function calling guide</a>.</p>`,29)]))}const g=i(n,[["render",l]]);export{c as __pageData,g as default};
