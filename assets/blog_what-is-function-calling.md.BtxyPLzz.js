import{_ as s}from"./chunks/daqianai-header.CFdivPrw.js";import{_ as n}from"./chunks/daqianai_wx_qrcode_white.eXbCYHnq.js";import{_ as o,C as r,c as h,o as a,a2 as l,b as u,w as t,a as p,G as c,a3 as d}from"./chunks/framework.DDIT__tB.js";const k="/assets/function-calling.CU5zVjik.png",B=JSON.parse('{"title":"Function Call：大模型如何突破自身局限\\"使用工具\\"","description":"","frontmatter":{"title":"Function Call：大模型如何突破自身局限\\"使用工具\\""},"headers":[],"relativePath":"blog/what-is-function-calling.md","filePath":"blog/what-is-function-calling.md","lastUpdated":1749146099000}'),E={name:"blog/what-is-function-calling.md"};function g(f,i,m,q,b,_){const e=r("Mermaid");return a(),h("div",null,[i[1]||(i[1]=l('<p><img src="'+s+`" alt="大千世界无奇不有，大千AI智探万象"></p><h1 id="function-call" tabindex="-1">function call <a class="header-anchor" href="#function-call" aria-label="Permalink to &quot;function call&quot;">​</a></h1><h2 id="简介" tabindex="-1">简介 <a class="header-anchor" href="#简介" aria-label="Permalink to &quot;简介&quot;">​</a></h2><h3 id="为什么需要function-call" tabindex="-1">为什么需要function call <a class="header-anchor" href="#为什么需要function-call" aria-label="Permalink to &quot;为什么需要function call&quot;">​</a></h3><ul><li><p>大语言模型 (LLM) 擅长解决许多类型的问题。但是，它们受到以下限制：</p><ul><li>知识固化：模型在训练后参数就被冻结，无法获取新知识</li><li>能力边界：无法直接查询或修改外部数据，缺乏实时交互能力</li><li>计算限制：复杂数学运算或专业领域计算能力有限</li></ul></li><li><p>函数调用(function call)本质上是为LLM提供了&quot;使用工具&quot;的能力，让模型可以：</p><ul><li>动态获取最新信息(如查询天气、股票)</li><li>执行具体操作(如发送邮件、预订机票)</li><li>处理复杂计算(如调用专业API)</li><li>连接企业系统(如CRM、ERP等业务系统)</li></ul></li><li><p>技术实现上，这需要开发者向模型提供一组定义良好的函数接口，模型会根据用户需求智能选择调用</p></li></ul><h2 id="function-call技术原理" tabindex="-1">Function Call技术原理 <a class="header-anchor" href="#function-call技术原理" aria-label="Permalink to &quot;Function Call技术原理&quot;">​</a></h2><ul><li>通过结构化输出(json格式)描述需要调用的函数及参数</li><li>模型自身不直接执行函数，而是输出调用指令</li><li>开发者负责实际函数调用并将结果返回给模型</li></ul><h2 id="应用" tabindex="-1">应用 <a class="header-anchor" href="#应用" aria-label="Permalink to &quot;应用&quot;">​</a></h2><h3 id="使用场景" tabindex="-1">使用场景 <a class="header-anchor" href="#使用场景" aria-label="Permalink to &quot;使用场景&quot;">​</a></h3><ul><li>实时数据获取：天气查询、股票行情、新闻检索</li><li>业务系统集成：CRM、ERP系统查询与操作</li><li>复杂任务分解：将复杂问题拆解为多个API调用</li><li>专业领域增强：法律、医疗等专业领域工具调用</li><li>典型案例： <ul><li>智能旅行助手：整合航班查询、酒店预订、天气查询等多个API</li><li>电商客服机器人：查询订单状态、退货处理等后端系统对接</li></ul></li></ul><h3 id="最佳实践" tabindex="-1">最佳实践 <a class="header-anchor" href="#最佳实践" aria-label="Permalink to &quot;最佳实践&quot;">​</a></h3><h4 id="函数名称" tabindex="-1">函数名称 <a class="header-anchor" href="#函数名称" aria-label="Permalink to &quot;函数名称&quot;">​</a></h4><ul><li>函数名称应以字母或下划线开头，且只能包含字符 a-z、A-Z、0-9、下划线、英文句点或英文短划线，长度上限为 64 个字符。</li></ul><h4 id="函数说明规范" tabindex="-1">函数说明规范 <a class="header-anchor" href="#函数说明规范" aria-label="Permalink to &quot;函数说明规范&quot;">​</a></h4><ul><li>清晰而详细地撰写函数说明。例如，对于 book_flight_ticket 函数： <ul><li>下面是一个良好的函数说明示例：book flight tickets after confirming users&#39; specific requirements, such as time, departure, destination, party size and preferred airline</li><li>下面是一个不良的函数说明示例：book flight ticket</li></ul></li></ul><h4 id="函数参数规范" tabindex="-1">函数参数规范 <a class="header-anchor" href="#函数参数规范" aria-label="Permalink to &quot;函数参数规范&quot;">​</a></h4><ul><li>命名规则：函数参数和嵌套属性名称应以字母或下划线开头，并且只能包含字母 a-z、A-Z、数字 0-9 或下划线，最大长度为 64 个字符。请勿在函数参数名称和嵌套属性中使用英文句点 (.)、短划线 (-) 或空格字符。</li></ul><h5 id="说明" tabindex="-1">说明 <a class="header-anchor" href="#说明" aria-label="Permalink to &quot;说明&quot;">​</a></h5><ul><li>编写清晰而详细的参数说明，包括首选格式或值等详细信息。例如，对于 book_flight_ticket 函数： <ul><li>以下是 departure 参数说明的一个良好示例：Use the 3 char airport code to represent the airport. For example, SJC or SFO. Don&#39;t use the city name.</li><li>以下是 departure 参数说明的一个不良示例：the departure airport</li></ul></li></ul><h5 id="类型" tabindex="-1">类型 <a class="header-anchor" href="#类型" aria-label="Permalink to &quot;类型&quot;">​</a></h5><ul><li><p>尽可能使用强类型参数来减少模型幻觉。例如，如果参数值来自有限集，请添加 enum 字段，而不是将值集放入说明中。如果参数值始终是整数，请将类型设置为 integer，而不是 number。</p></li><li><p>参数类型定义示例：</p></li></ul><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;parameters&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;location&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;type&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;string&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;description&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;城市名称，如&#39;北京&#39;或&#39;New York&#39;&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;temperature_unit&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;type&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;string&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;enum&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;celsius&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;fahrenheit&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;default&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;celsius&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h5 id="系统指令优化" tabindex="-1">系统指令优化 <a class="header-anchor" href="#系统指令优化" aria-label="Permalink to &quot;系统指令优化&quot;">​</a></h5><ul><li>使用包含日期、时间或位置参数的函数时，请在系统说明中添加当前日期、时间或相关位置信息（例如城市和国家/地区）。这样可以确保模型具有必要的上下文来准确处理请求，即使用户提示缺少详细信息也是如此。</li></ul><h4 id="用户提示" tabindex="-1">用户提示 <a class="header-anchor" href="#用户提示" aria-label="Permalink to &quot;用户提示&quot;">​</a></h4><ul><li>为获得最佳结果，请在用户提示前面加上以下详细信息： <ul><li>模型的其他上下文，例如 You are a flight API assistant to help with searching flights based on user preferences.</li><li>有关如何及何时使用函数的详细信息或说明，例如 Don&#39;t make assumptions on the departure or destination airports. Always use a future date for the departure or destination time.</li><li>在用户查询不明确时询问澄清性问题的说明，例如 Ask clarifying questions if not enough information is available.</li></ul></li></ul><h4 id="生成配置" tabindex="-1">生成配置 <a class="header-anchor" href="#生成配置" aria-label="Permalink to &quot;生成配置&quot;">​</a></h4><ul><li>对于温度参数，请使用 0 或其他较低值。这会指示模型生成置信度更高的结果并减少幻觉。</li></ul><h4 id="api-调用" tabindex="-1">API 调用 <a class="header-anchor" href="#api-调用" aria-label="Permalink to &quot;API 调用&quot;">​</a></h4><ul><li>如果模型建议调用一个会发送订单、更新数据库或以其他方式产生重大后果的函数，请在执行之前先向用户验证该函数调用。</li></ul><h3 id="实例说明" tabindex="-1">实例说明 <a class="header-anchor" href="#实例说明" aria-label="Permalink to &quot;实例说明&quot;">​</a></h3><ul><li><p>例如，您可以提供一个函数 get_weather，该函数接受一个位置参数，并返回该位置的天气状况信息</p></li><li><p>处理提示时，该模型可以选择将某些数据处理任务委托给您确定的函数。模型不会直接调用函数。相反，模型会提供结构化数据输出，其中包含要调用的函数和要使用的参数值。例如，对于提示<code>What is the weather like in Boston?</code>，模型可以将处理委托给<code>get_weather</code>函数，并提供位置参数值<code>Boston, MA</code>.</p></li><li><p>您可以使用模型的结构化输出来调用外部 API。例如，您可以连接到天气服务 API，提供位置 Boston, MA，并接收有关温度、云量和风况的信息</p></li><li><p>然后，您可以将 API 输出返回给模型，使模型能够完成对提示的回答。对于天气示例，模型可能会提供以下回答：It is currently 38 degrees Fahrenheit in Boston, MA with partly cloudy skies.</p></li><li><p><img src="`+k+'" alt="google-function-calling-weather-example"></p></li><li><p>完整交互流程</p></li></ul>',32)),(a(),u(d,null,{default:t(()=>[c(e,{id:"mermaid-308",class:"mermaid",graph:"flowchart%20TB%0A%20%20question(%22%E7%94%A8%E6%88%B7%E6%8F%90%E9%97%AE%22)%20--%3E%20llm(%22%E6%A8%A1%E5%9E%8B%E7%94%9F%E6%88%90%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8%E6%8C%87%E4%BB%A4%22)%0A%20%20llm%20--%3E%20fncall(%22%E5%BC%80%E5%8F%91%E8%80%85%E6%89%A7%E8%A1%8C%E5%87%BD%E6%95%B0%22)%0A%20%20fncall%20--%3E%20result(%22%E8%BF%94%E5%9B%9E%E7%BB%93%E6%9E%9C%E7%BB%99%E6%A8%A1%E5%9E%8B%22)%0A%20%20result%20--%3E%20final(%22%E6%A8%A1%E5%9E%8B%E7%94%9F%E6%88%90%E6%9C%80%E7%BB%88%E5%9B%9E%E7%AD%94%22)%0A"})]),fallback:t(()=>i[0]||(i[0]=[p(" Loading... ")])),_:1})),i[2]||(i[2]=l('<h2 id="参考" tabindex="-1">参考 <a class="header-anchor" href="#参考" aria-label="Permalink to &quot;参考&quot;">​</a></h2><ul><li><a href="https://cloud.google.com/vertex-ai/generative-ai/docs/multimodal/function-calling?hl=zh-cn" target="_blank" rel="noreferrer">https://cloud.google.com/vertex-ai/generative-ai/docs/multimodal/function-calling?hl=zh-cn</a></li><li>最佳实践 - <a href="https://cloud.google.com/vertex-ai/generative-ai/docs/multimodal/function-calling?hl=zh-cn#best-practices" target="_blank" rel="noreferrer">https://cloud.google.com/vertex-ai/generative-ai/docs/multimodal/function-calling?hl=zh-cn#best-practices</a></li></ul><p><img src="'+n+'" alt="微信搜索 &quot;大千AI助手&quot; 学习最实用的AI技术"></p>',3))])}const y=o(E,[["render",g]]);export{B as __pageData,y as default};
