import{_ as p}from"./chunks/daqianai-header.CFdivPrw.js";import{_ as n}from"./chunks/daqianai_wx_qrcode_white.eXbCYHnq.js";import{_ as l,c as o,o as r,a2 as i,j as t,a as s,t as h}from"./chunks/framework.DDIT__tB.js";const d="/assets/execuse-me.DmGOTPP9.jpg",k="/assets/word-template.Bn3zXBxE.png",F=JSON.parse('{"title":"解密PromptTemplate：为什么说它是AI时代的Jinja模板？","description":"","frontmatter":{"title":"解密PromptTemplate：为什么说它是AI时代的Jinja模板？"},"headers":[],"relativePath":"blog/what-is-prompt-template.md","filePath":"blog/what-is-prompt-template.md","lastUpdated":1748881467000}'),m={name:"blog/what-is-prompt-template.md"};function g(e,a,c,u,E,y){return r(),o("div",null,[a[8]||(a[8]=i('<p><img src="'+p+'" alt="大千世界无奇不有，大千AI智探万象"></p><h1 id="什么是prompttemplate" tabindex="-1">什么是PromptTemplate ? <a class="header-anchor" href="#什么是prompttemplate" aria-label="Permalink to &quot;什么是PromptTemplate ?&quot;">​</a></h1><p>简而言之<code>PromptTemplate</code>就是<strong>用来生成提示词的模版</strong>。</p><p><img src="'+d+'" alt="execuse-me"></p><p>没错，顾名思义，<code>PromptTemplate = Prompt&#39;s Template</code>，或者说<code>PromptTemplate = Prompt + Template</code>。跟你从小到大见到的或用过的其他称作模版的东西都是一模一样的。</p><h1 id="introduction-to-template" tabindex="-1">Introduction to Template <a class="header-anchor" href="#introduction-to-template" aria-label="Permalink to &quot;Introduction to Template&quot;">​</a></h1><h2 id="生活里的模版" tabindex="-1">生活里的模版 <a class="header-anchor" href="#生活里的模版" aria-label="Permalink to &quot;生活里的模版&quot;">​</a></h2><p>模版这个概念并不新鲜，有时候叫按要求的格式来。</p><p>例如考试的试卷就算是一类模版，每一张试卷就是一个模版。这个模版里留的空白作答位置就是让考生作答的变量。</p><p>例如作文里的议论文，老师也会讲一些格式，像开头通过话题引出论点、中间则引入几个分论点和相关论据论证、结尾则升华总结。这个整体的格式也是一个模版。</p><p>更严格的是论文，虽然内容方向都不同，但是不同作用(综述性的、非综述性的)的论文也有不同的常用格式，这其实也是一类模版。</p><p>更常见的是你整理的电子文档，比如一份简历、一个报告、一个报表，或者宣传小册，其实很多时候都是通过套一个模版(比如word模版)然后填上个性化的内容快速生成的。</p><p><img src="'+k+'" alt="word-template"></p><h2 id="那么为什么用模版呢" tabindex="-1">那么为什么用模版呢？ <a class="header-anchor" href="#那么为什么用模版呢" aria-label="Permalink to &quot;那么为什么用模版呢？&quot;">​</a></h2><p>因为省事儿。</p><p>套一个简历模版，按要求填入自己的相关信息，很快就能生成一份精美的简历。</p><p>套一个报表模版，填上自己的数据，很快就能生成一份图文并茂的报表。</p><p>核心就是在一个做好的<strong>模版</strong>上套上<strong>个性化的东西</strong>，然后就OK了。</p><p>那么一个定义好的<code>PromptTemplate</code>，再填上个性化的内容，就能生成一个具有一定格式的方便AI理解的提示词。</p><p>模版的底层逻辑其实就是<strong>抽象</strong>和<strong>复用</strong>。把不变的抽象出来，加上变的就能复用就能省事儿，有时候是省生成模版的人的事儿，有时候是省用模版的人的事儿。把具有一定格式的会反复用到的东西提取出来就是一个模版，填上个性化的内容就能快速出结果。</p><h1 id="数字世界里的模版演进史" tabindex="-1">数字世界里的模版演进史 <a class="header-anchor" href="#数字世界里的模版演进史" aria-label="Permalink to &quot;数字世界里的模版演进史&quot;">​</a></h1><p>在数字世界里，&quot;模版&quot;一直是提高效率的神器。从Django模版到Jinja模版，从Python的f-string到Java的泛型，模版技术以各种形态存在于数字世界的各个角落。而今天，我们要探讨的LangChain中的PromptTemplate，正是这一悠久传统在AI时代的最新演绎。</p><h2 id="模版技术的演进史" tabindex="-1">模版技术的演进史 <a class="header-anchor" href="#模版技术的演进史" aria-label="Permalink to &quot;模版技术的演进史&quot;">​</a></h2><p>让我们先回顾模版技术在不同领域的发展轨迹：</p><ol><li><strong>网页开发领域</strong>：从静态HTML(纯文本)到服务端渲染(Django/Jinja模板)再到现代前端框架(React/Vue的客户端模板)</li><li><strong>办公软件领域</strong>：PowerPoint的幻灯片模板、Word的文档模板</li><li><strong>编程语言领域</strong>：Java的泛型(<code>List&lt;String&gt;</code>)、Python的f-string(f&quot;Hello {name}&quot;)</li><li><strong>写作领域</strong>：三段论作文模板(开头-正文-结尾)</li></ol>',25)),t("p",null,[a[0]||(a[0]=s("这些模版技术的共同特点是：")),a[1]||(a[1]=t("strong",null,"将不变的结构与可变的内容分离",-1)),a[2]||(a[2]=s("，通过占位符实现内容的动态填充。例如，Jinja模板中的")),t("code",null,h(e.variable),1),a[3]||(a[3]=s("，Django模板中的")),a[4]||(a[4]=t("code",null,"{% tag %}",-1)),a[5]||(a[5]=s("，或是Python f-string中的")),a[6]||(a[6]=t("code",null,"{expression}",-1)),a[7]||(a[7]=s("。"))]),a[9]||(a[9]=i(`<h2 id="prompttemplate-ai时代的模版革命" tabindex="-1">PromptTemplate：AI时代的模版革命 <a class="header-anchor" href="#prompttemplate-ai时代的模版革命" aria-label="Permalink to &quot;PromptTemplate：AI时代的模版革命&quot;">​</a></h2><p><code>LangChain</code>中的<code>PromptTemplate</code>延续了这一思想传统，但将其应用场景扩展到了与AI模型的交互中。它本质上是一个<strong>预定义的对话结构</strong>，包含固定文本和可变参数的组合。</p><p>例如，让AI写产品说明时，使用<code>PromptTemplate</code>前可能需要手动输入： <code>请写一篇关于{产品名}的说明，突出其{核心功能}，面向{目标用户}，字数约{字数}</code></p><p>而使用<code>PromptTemplate</code>后，你可以创建一个模板：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>请写一篇关于{{product_name}}的说明，突出其{{core_features}}，面向{{target_audience}}，字数约{{word_count}}</span></span></code></pre></div><p>这与我们熟悉的各种模版技术何其相似！区别仅在于，<code>PromptTemplate</code>的输出不是网页、文档或代码，而是<strong>给AI模型的指令</strong>。</p><h2 id="技术架构的惊人相似性" tabindex="-1">技术架构的惊人相似性 <a class="header-anchor" href="#技术架构的惊人相似性" aria-label="Permalink to &quot;技术架构的惊人相似性&quot;">​</a></h2><p>有趣的是，<code>PromptTemplate</code>在LangChain中的角色演变，与Web技术的发展轨迹形成了奇妙的呼应：</p><ol><li><strong>静态提示</strong>：如同静态网页，每次完整编写提示词</li><li><strong>服务端模板</strong>：类似Django模板，提前定义结构，运行时填充变量</li><li><strong>客户端模板</strong>：像React组件，可以嵌套组合更复杂的提示结构</li></ol><p>LangChain甚至提供了<code>FewShotPromptTemplate</code>这样的组件，允许像&quot;模板继承&quot;一样构建复杂的提示体系。</p><h1 id="prompttemplate的核心价值" tabindex="-1">PromptTemplate的核心价值 <a class="header-anchor" href="#prompttemplate的核心价值" aria-label="Permalink to &quot;PromptTemplate的核心价值&quot;">​</a></h1><p>为什么我们需要<code>PromptTemplate</code>？研究表明，AI模型对提示词的格式和结构比较敏感。Anthropic的研究[1]显示，合理的提示模板可以显著提升任务完成效果。</p><blockquote><p>PromptTemplate的价值主要体现在：</p></blockquote><ol><li><strong>一致性</strong>：确保每次与AI交互都遵循最佳实践格式</li><li><strong>复用性</strong>：避免重复编写相似提示</li><li><strong>可维护性</strong>：集中管理提示，便于统一修改</li><li><strong>组合性</strong>：通过模板嵌套构建复杂提示</li></ol><h1 id="prompttemplate实战" tabindex="-1">PromptTemplate实战 <a class="header-anchor" href="#prompttemplate实战" aria-label="Permalink to &quot;PromptTemplate实战&quot;">​</a></h1><p>让我们看几个PromptTemplate的示例，感受其与各种模版技术的关联：</p><h2 id="基础版" tabindex="-1">基础版 <a class="header-anchor" href="#基础版" aria-label="Permalink to &quot;基础版&quot;">​</a></h2><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> langchain_core.prompts </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> PromptTemplate</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 基础版 f-string 模板</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">template </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;告诉我关于</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">{subject}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">的5个有趣事实&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">prompt </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> PromptTemplate.from_template(template)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(prompt.format(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">subject</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;量子力学&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 输出: 告诉我关于量子力学的5个有趣事实</span></span></code></pre></div><h2 id="进阶版" tabindex="-1">进阶版 <a class="header-anchor" href="#进阶版" aria-label="Permalink to &quot;进阶版&quot;">​</a></h2><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> langchain_core.prompts </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> PromptTemplate</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 进阶版 jinja2 模板</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">template </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">根据用户水平调整解释：{% if expert_level == &#39;beginner&#39; %} 请用简单比喻解释{{ concept }} {% else %} 请提供{{ concept }}的技术细节 {% endif %}</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">prompt </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> PromptTemplate.from_template(template, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">template_format</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;jinja2&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(prompt.format(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">concept</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;量子力学&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">expert_level</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;beginner&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 输出: 根据用户水平调整解释： 请用简单比喻解释量子力学</span></span></code></pre></div><h2 id="模版思维的价值" tabindex="-1">模版思维的价值 <a class="header-anchor" href="#模版思维的价值" aria-label="Permalink to &quot;模版思维的价值&quot;">​</a></h2><p>自古以来，模版技术的本质从未改变：<strong>分离变与不变</strong>、<strong>封装复杂细节</strong>、<strong>提供友好接口</strong>。这种思维在日常生活和计算机科学中源远流长，从Donald Knuth提出的&quot;文学编程&quot;[2]到现代AI工程实践，一脉相承。</p><p>PromptTemplate的价值在于将经典模版模式应用于AI交互。它帮助开发者更专注于任务目标，而非提示词的具体表述。</p><p>在AI时代，掌握PromptTemplate不仅是学习一个新工具，更是继承了一种经过时间检验的计算思维。无论你是刚入门的小白，还是经验丰富的高手，理解这种连续性都将帮助你更好地驾驭技术演进的浪潮。</p><h2 id="reference" tabindex="-1">Reference <a class="header-anchor" href="#reference" aria-label="Permalink to &quot;Reference&quot;">​</a></h2><ul><li>[1] Anthropic研究：Prompt Engineering Techniques. <a href="https://arxiv.org/abs/2305.04044" target="_blank" rel="noreferrer">https://arxiv.org/abs/2305.04044</a></li><li>[2] Knuth, D. E. (1984). Literate Programming. The Computer Journal. <a href="https://doi.org/10.1093/comjnl/27.2.97" target="_blank" rel="noreferrer">https://doi.org/10.1093/comjnl/27.2.97</a></li></ul><p><img src="`+n+'" alt="微信搜索 &quot;大千AI助手&quot; 学习最实用的AI技术"></p>',27))])}const T=l(m,[["render",g]]);export{F as __pageData,T as default};
