import{_ as a,c as t,o as i,a2 as r}from"./chunks/framework.DDIT__tB.js";const p=JSON.parse('{"title":"Data retrieval with GPT Actions","description":"","frontmatter":{},"headers":[],"relativePath":"docs/openai/actions/data-retrieval.md","filePath":"docs/openai/actions/data-retrieval.md","lastUpdated":1747747486000}'),o={name:"docs/openai/actions/data-retrieval.md"};function s(n,e,l,d,c,u){return i(),t("div",null,e[0]||(e[0]=[r('<h1 id="data-retrieval-with-gpt-actions" tabindex="-1">Data retrieval with GPT Actions <a class="header-anchor" href="#data-retrieval-with-gpt-actions" aria-label="Permalink to &quot;Data retrieval with GPT Actions&quot;">​</a></h1><p>Retrieve data using APIs and databases with GPT Actions.</p><p>One of the most common tasks an action in a GPT can perform is data retrieval. An action might:</p><ol><li>Access an API to retrieve data based on a keyword search</li><li>Access a relational database to retrieve records based on a structured query</li><li>Access a vector database to retrieve text chunks based on semantic search</li></ol><p>We’ll explore considerations specific to the various types of retrieval integrations in this guide.</p><h2 id="data-retrieval-using-apis" tabindex="-1">Data retrieval using APIs <a class="header-anchor" href="#data-retrieval-using-apis" aria-label="Permalink to &quot;Data retrieval using APIs&quot;">​</a></h2><p>Many organizations rely on 3rd party software to store important data. Think Salesforce for customer data, Zendesk for support data, Confluence for internal process data, and Google Drive for business documents. These providers often provide REST APIs which enable external systems to search for and retrieve information.</p><p>When building an action to integrate with a provider&#39;s REST API, start by reviewing the existing documentation. You’ll need to confirm a few things:</p><ol><li>Retrieval methods <ul><li><strong>Search</strong> - Each provider will support different search semantics, but generally you want a method which takes a keyword or query string and returns a list of matching documents. See <a href="https://developers.google.com/drive/api/guides/search-files" target="_blank" rel="noreferrer">Google Drive’s <code>file.list</code> method</a> for an example.</li><li><strong>Get</strong> - Once you’ve found matching documents, you need a way to retrieve them. See <a href="https://developers.google.com/drive/api/reference/rest/v3/files/get" target="_blank" rel="noreferrer">Google Drive’s <code>file.get</code> method</a> for an example.</li></ul></li><li>Authentication scheme <ul><li>For example, <a href="https://developers.google.com/workspace/guides/configure-oauth-consent" target="_blank" rel="noreferrer">Google Drive uses OAuth</a> to authenticate users and ensure that only their available files are available for retrieval.</li></ul></li><li>OpenAPI spec <ul><li>Some providers will provide an OpenAPI spec document which you can import directly into your action. See <a href="https://developer.zendesk.com/api-reference/ticketing/introduction/#download-openapi-file" target="_blank" rel="noreferrer">Zendesk</a>, for an example. <ul><li>You may want to remove references to methods your GPT <em>won’t</em> access, which constrains the actions your GPT can perform.</li></ul></li><li>For providers who <em>don’t</em> provide an OpenAPI spec document, you can create your own using the <a href="https://chatgpt.com/g/g-TYEliDU6A-actionsgpt" target="_blank" rel="noreferrer">ActionsGPT</a> (a GPT developed by OpenAI).</li></ul></li></ol><p>Your goal is to get the GPT to use the action to search for and retrieve documents containing context which are relevant to the user’s prompt. Your GPT follows your instructions to use the provided search and get methods to achieve this goal.</p><h2 id="data-retrieval-using-relational-databases" tabindex="-1">Data retrieval using Relational Databases <a class="header-anchor" href="#data-retrieval-using-relational-databases" aria-label="Permalink to &quot;Data retrieval using Relational Databases&quot;">​</a></h2><p>Organizations use relational databases to store a variety of records pertaining to their business. These records can contain useful context that will help improve your GPT’s responses. For example, let’s say you are building a GPT to help users understand the status of an insurance claim. If the GPT can look up claims in a relational database based on a claims number, the GPT will be much more useful to the user.</p><p>When building an action to integrate with a relational database, there are a few things to keep in mind:</p><ol><li>Availability of REST APIs <ul><li>Many relational databases do not natively expose a REST API for processing queries. In that case, you may need to build or buy middleware which can sit between your GPT and the database.</li><li>This middleware should do the following: <ul><li>Accept a formal query string</li><li>Pass the query string to the database</li><li>Respond back to the requester with the returned records</li></ul></li></ul></li><li>Accessibility from the public internet <ul><li>Unlike APIs which are designed to be accessed from the public internet, relational databases are traditionally designed to be used within an organization’s application infrastructure. Because GPTs are hosted on OpenAI’s infrastructure, you’ll need to make sure that any APIs you expose are accessible outside of your firewall.</li></ul></li><li>Complex query strings <ul><li>Relational databases uses formal query syntax like SQL to retrieve relevant records. This means that you need to provide additional instructions to the GPT indicating which query syntax is supported. The good news is that GPTs are usually very good at generating formal queries based on user input.</li></ul></li><li>Database permissions <ul><li>Although databases support user-level permissions, it is likely that your end users won’t have permission to access the database directly. If you opt to use a service account to provide access, consider giving the service account read-only permissions. This can avoid inadvertently overwriting or deleting existing data.</li></ul></li></ol><p>Your goal is to get the GPT to write a formal query related to the user’s prompt, submit the query via the action, and then use the returned records to augment the response.</p><h2 id="data-retrieval-using-vector-databases" tabindex="-1">Data retrieval using Vector Databases <a class="header-anchor" href="#data-retrieval-using-vector-databases" aria-label="Permalink to &quot;Data retrieval using Vector Databases&quot;">​</a></h2><p>If you want to equip your GPT with the most relevant search results, you might consider integrating your GPT with a vector database which supports semantic search as described above. There are many managed and self hosted solutions available on the market, <a href="https://github.com/openai/chatgpt-retrieval-plugin#choosing-a-vector-database" target="_blank" rel="noreferrer">see here for a partial list</a>.</p><p>When building an action to integrate with a vector database, there are a few things to keep in mind:</p><ol><li>Availability of REST APIs <ul><li>Many relational databases do not natively expose a REST API for processing queries. In that case, you may need to build or buy middleware which can sit between your GPT and the database (more on middleware below).</li></ul></li><li>Accessibility from the public internet <ul><li>Unlike APIs which are designed to be accessed from the public internet, relational databases are traditionally designed to be used within an organization’s application infrastructure. Because GPTs are hosted on OpenAI’s infrastructure, you’ll need to make sure that any APIs you expose are accessible outside of your firewall.</li></ul></li><li>Query embedding <ul><li>As discussed above, vector databases typically accept a vector embedding (as opposed to plain text) as query input. This means that you need to use an embedding API to convert the query input into a vector embedding before you can submit it to the vector database. This conversion is best handled in the REST API gateway, so that the GPT can submit a plaintext query string.</li></ul></li><li>Database permissions <ul><li>Because vector databases store text chunks as opposed to full documents, it can be difficult to maintain user permissions which might have existed on the original source documents. Remember that any user who can access your GPT will have access to all of the text chunks in the database and plan accordingly.</li></ul></li></ol><h3 id="middleware-for-vector-databases" tabindex="-1">Middleware for vector databases <a class="header-anchor" href="#middleware-for-vector-databases" aria-label="Permalink to &quot;Middleware for vector databases&quot;">​</a></h3><p>As described above, middleware for vector databases typically needs to do two things:</p><ol><li>Expose access to the vector database via a REST API</li><li>Convert plaintext query strings into vector embeddings</li></ol><p><img src="https://cdn.openai.com/API/docs/images/actions-db-diagram.webp" alt="Middleware for vector databases"></p><p>The goal is to get your GPT to submit a relevant query to a vector database to trigger a semantic search, and then use the returned text chunks to augment the response.</p>',24)]))}const m=a(o,[["render",s]]);export{p as __pageData,m as default};
