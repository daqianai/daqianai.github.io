import{_ as e}from"./chunks/daqianai-header.CFdivPrw.js";import{_ as t}from"./chunks/daqianai_wx_qrcode_white.eXbCYHnq.js";import{_ as h,C as p,c as k,o as a,a2 as i,b as r,w as n,a as o,G as E,a3 as c}from"./chunks/framework.DDIT__tB.js";const _=JSON.parse('{"title":"LangChain Core架构解析：模块化设计与LCEL原语实现原理","description":"","frontmatter":{"title":"LangChain Core架构解析：模块化设计与LCEL原语实现原理"},"headers":[],"relativePath":"blog/langchain-core-introduction.md","filePath":"blog/langchain-core-introduction.md","lastUpdated":1748782171000}'),d={name:"blog/langchain-core-introduction.md"};function g(u,s,b,A,y,C){const l=p("Mermaid");return a(),k("div",null,[s[1]||(s[1]=i('<p><img src="'+e+'" alt="大千世界无奇不有，大千AI智探万象"></p><h1 id="langchain-core-introduction" tabindex="-1">LangChain Core Introduction <a class="header-anchor" href="#langchain-core-introduction" aria-label="Permalink to &quot;LangChain Core Introduction&quot;">​</a></h1><blockquote><p>LangChain Core定义了LangChain生态中最核心的最基础的抽象和LCEL原语(LangChain表达式语言)。</p></blockquote><h2 id="设计原则" tabindex="-1">设计原则 <a class="header-anchor" href="#设计原则" aria-label="Permalink to &quot;设计原则&quot;">​</a></h2><blockquote><p>遵循 <strong>模块化设计</strong> 和 <strong>极简风格</strong></p></blockquote><blockquote><p>设计哲学：约定优于配置(Convention Over Configuration)</p></blockquote><ul><li>模块化设计: 各个抽象对象相互独立，不与任何特定LLM绑定。 <ul><li>主要包括LM、Document Loader、Embedding、VectorStore、Retriever等抽象</li></ul></li><li>极简风格: 接口设计简洁直观，避免过度封装。</li></ul><blockquote><p>优势: 任何provider都可以实现相关接口然后加入LangChain生态系统</p></blockquote><h2 id="核心抽象" tabindex="-1">核心抽象 <a class="header-anchor" href="#核心抽象" aria-label="Permalink to &quot;核心抽象&quot;">​</a></h2><blockquote><p>核心抽象包括: 接口 + 协议 + 语法</p></blockquote><blockquote><p>三位一体的设计架构：</p></blockquote><ul><li>接口: 包括核心组件的接口(比如chat models, LLMs, vector stores, retrievers等等)</li><li>协议: 通用调用协议(Runnable抽象)</li><li>语法: LCEL (LangChain Expression Language), 用来声明编排各个组件</li></ul><h3 id="runnable接口" tabindex="-1">Runnable接口 <a class="header-anchor" href="#runnable接口" aria-label="Permalink to &quot;Runnable接口&quot;">​</a></h3><ul><li><strong>Runnable</strong>接口是LangChain设计的基石（类似Java中的Runnable接口）, 实现了与所有组件的标准化交互, 并通过LCEL实现各组件的组合</li><li>它代表一个可以被调用的、可并行化的、可流处理的、可变换的、可组合的工作单元</li></ul><hr><blockquote><p>主要作用</p></blockquote><ul><li>统一的调用接口: 所有组件通过标准方法集(<code>invoke/ainvoke, stream/astream, batch/abatch</code>)提供一致的使用体验</li><li>并行化: 批处理操作<code>batch</code></li><li>异步支持: <code>a</code>(async)开头的方法<code>ainvoke, astream, abatch</code>等</li><li>可组合性: 通过pipe语法实现各组件的组合</li></ul><hr><blockquote><p>使用方式 <strong>Runnable</strong>接口的使用方式包括: 声明式 和 立即执行</p></blockquote><ul><li>声明式: 通过LCEL声明，lazy执行，类似spark的transform</li><li>立即执行: 调用<code>invoke</code>等方法，立即执行，类似spark的action</li></ul><h3 id="主要抽象类家族" tabindex="-1">主要抽象类家族 <a class="header-anchor" href="#主要抽象类家族" aria-label="Permalink to &quot;主要抽象类家族&quot;">​</a></h3>',21)),(a(),r(c,null,{default:n(()=>[E(l,{id:"mermaid-142",class:"mermaid",graph:"classDiagram%0A%20%20direction%20LR%0A%20%20note%20for%20Runnable%20%22%E6%A0%B8%E5%BF%83%E6%8E%A5%E5%8F%A3%EF%BC%9A%3C%2Fbr%3E-%20%E7%BB%9F%E4%B8%80%E8%B0%83%E7%94%A8%E8%A7%84%E8%8C%83%3C%2Fbr%3E-%20%E7%BB%84%E5%90%88%E8%83%BD%E5%8A%9B%E5%9F%BA%E7%A1%80%22%0A%20%20note%20%22%E8%AE%BE%E8%AE%A1%E7%89%B9%E7%82%B9%EF%BC%9A%3C%2Fbr%3E-%20%E6%89%80%E6%9C%89%E6%A0%B8%E5%BF%83%E7%BB%84%E4%BB%B6%E5%BF%85%E9%A1%BB%E5%AE%9E%E7%8E%B0Runnable%3C%2Fbr%3E-%20%E5%9F%BA%E4%BA%8E%E6%8E%A5%E5%8F%A3%E8%80%8C%E9%9D%9E%E5%AE%9E%E7%8E%B0%22%0A%20%20note%20%22BaseLLM%2FBaseChatModel%E6%8F%90%E4%BE%9B%E5%9F%BA%E7%A1%80%E6%A8%A1%E5%9E%8B%E8%83%BD%E5%8A%9B%22%0A%0A%20%20class%20Runnable%5B%22%26lt%26ltinterface%26gt%26gt%3C%2Fbr%3E%20Runnable%22%5D%20%7B%0A%20%20%20%20%2Binvoke(input)%0A%20%20%20%20%2Bstream(input)%0A%20%20%20%20%2Bbatch(inputs)%0A%20%20%20%20%2Bainvoke(input)%0A%20%20%20%20%2Bastream(input)%0A%20%20%20%20%2Babatch(inputs)%0A%20%20%20%20%2Btransform(func)%0A%20%20%20%20%2Batransform(func)%20%20%20%20%0A%20%20%7D%0A%20%20class%20BaseChatModel%20%7B%0A%20%20%20%20%2Bgenerate(messages)%0A%20%20%20%20%2Bbind_tools(tools)%0A%20%20%20%20%2Bwith_structured_output(schema)%0A%20%20%7D%0A%20%20class%20BaseLLM%20%7B%0A%20%20%20%20%2Bgenerate_prompt(prompts)%0A%20%20%7D%0A%20%20class%20Chain%20%7B%0A%20%20%20%20%2Binput_keys%0A%20%20%20%20%2Boutput_keys%0A%20%20%20%20%2B_call()%0A%20%20%7D%0A%20%20class%20PromptTemplate%20%7B%0A%20%20%20%20%2Bformat(kwargs)%0A%20%20%7D%0A%20%20class%20Retriever%20%7B%0A%20%20%20%20%2Bget_relevant_documents(query)%0A%20%20%7D%0A%20%20class%20Tool%20%7B%0A%20%20%20%20%2Bname%0A%20%20%20%20%2Bdescription%0A%20%20%20%20%2Brun(input)%0A%20%20%7D%0A%20%20class%20OutputParser%20%7B%0A%20%20%20%20%2Bparse(text)%0A%20%20%7D%0A%20%20Runnable%20%3C%7C--%20BaseChatModel%0A%20%20Runnable%20%3C%7C--%20BaseLLM%0A%20%20Runnable%20%3C%7C--%20Chain%0A%20%20Runnable%20%3C%7C--%20PromptTemplate%0A%20%20Runnable%20%3C%7C--%20Retriever%0A%20%20Runnable%20%3C%7C--%20Tool%0A%20%20Runnable%20%3C%7C--%20OutputParser%0A"})]),fallback:n(()=>s[0]||(s[0]=[o(" Loading... ")])),_:1})),s[2]||(s[2]=i(`<h3 id="lcel" tabindex="-1">LCEL <a class="header-anchor" href="#lcel" aria-label="Permalink to &quot;LCEL&quot;">​</a></h3><blockquote><p>LCEL全称 LangChain Expression Language ，是一种声明式语言，用来组合LangChain Core的Runnable成各种序列或DAG，满足由LLM驱动的AI应用的常用组合模式的开发。 LangChain Core会将LCEL编译为优化的执行计划，并自动支持并行化、流式传输、过程跟踪和异步执行。</p></blockquote><ul><li>LCEL通过以下机制实现高效执行</li></ul><ol><li><strong>自动优化</strong>：编译时合并操作符，减少调用开销</li><li><strong>透明并行</strong>：自动检测可并行执行的组件</li><li><strong>错误传播</strong>：异常处理链路贯穿整个工作流</li></ol><p>主要组合原语是<code>RunnableSequence</code>和<code>RunnableParallel</code>。 <strong>RunnableSequence</strong> 按顺序依次调用一系列runnables。并且用上一个Runnable的<strong>输出</strong>作为下一个Runnable的<strong>输入</strong>。 构建方式</p><ul><li>多个Runnable实例通过 <code>|</code> 运算符连接</li><li>通过传入多个Runnable实例列表给RunnableSequence直接创建。</li></ul><p><code>RunnableSequence</code> 实例</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> langchain_core.runnables </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> RunnableLambda</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 示例1：创建简单计算流水线</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 通过 \`|\` 创建 RunnableSequence 实例</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">sequence </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> RunnableLambda(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">lambda</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x: x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> RunnableLambda(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">lambda</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x: x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(sequence))</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 输出: &lt;class &#39;langchain_core.runnables.base.RunnableSequence&#39;&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 单个输入调用 invoke</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">invoke_result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sequence.invoke(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(invoke_result), invoke_result)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 输出: &lt;class &#39;int&#39;&gt; 4</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 批处理 batch</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">batch_result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sequence.batch([</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">])</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(batch_result), batch_result)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 输出: &lt;class &#39;list&#39;&gt; [4, 6, 8]</span></span></code></pre></div><p><strong>RunnableParallel</strong> 并发调用一系列runnables。并且用同样的输入作为每一个Runnable的<strong>输入</strong>。 构建方式</p><ul><li>多个Runnable实例通过 <code>|</code> 运算符连接</li><li>通过传入多个Runnable实例列表给RunnableSequence直接创建。</li></ul><p><code>RunnableParallel</code>实例</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> langchain_core.runnables </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> RunnableLambda</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 示例2：创建并行计算分支</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 使用 dict 创建 RunnableParallel 实例</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">sequence </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> RunnableLambda(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">lambda</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x: x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &#39;mul_2&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: RunnableLambda(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">lambda</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x: x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &#39;mul_5&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: RunnableLambda(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">lambda</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x: x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(sequence))</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 输出: &lt;class &#39;langchain_core.runnables.base.RunnableSequence&#39;&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 单个输入调用 invoke</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">invoke_result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sequence.invoke(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(invoke_result), invoke_result)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 输出: &lt;class &#39;dict&#39;&gt; {&#39;mul_2&#39;: 4, &#39;mul_5&#39;: 10}</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">小提示</p><p><code>RunnableLambda</code>是一个可以将一个python callable转换成一个Runnable实例的类。上述实例用来转换lambda函数。</p></div><h2 id="reference" tabindex="-1">Reference <a class="header-anchor" href="#reference" aria-label="Permalink to &quot;Reference&quot;">​</a></h2><ul><li><a href="https://github.com/langchain-ai/langchain/blob/master/libs/core/README.md" target="_blank" rel="noreferrer">https://github.com/langchain-ai/langchain/blob/master/libs/core/README.md</a></li><li><a href="https://python.langchain.com/docs/concepts/lcel/" target="_blank" rel="noreferrer">https://python.langchain.com/docs/concepts/lcel/</a></li><li>langchain_core.runables.base.Runnable</li></ul><p><img src="`+t+'" alt="微信搜索 &quot;大千AI助手&quot; 学习最实用的AI技术"></p>',16))])}const D=h(d,[["render",g]]);export{_ as __pageData,D as default};
