import{_ as s}from"./chunks/daqianai-header.CFdivPrw.js";import{_ as t,c as a,o as e,a2 as n}from"./chunks/framework.DDIT__tB.js";const l="/assets/too-young-too-naive.CDJ6a_Px.jpg",q=JSON.parse('{"title":"深度解密: 大模型真的会思考吗","description":"","frontmatter":{},"headers":[],"relativePath":"blog/in-depth-llm-output.md","filePath":"blog/in-depth-llm-output.md","lastUpdated":1749232088000}'),o={name:"blog/in-depth-llm-output.md"};function p(h,i,r,d,k,u){return e(),a("div",null,i[0]||(i[0]=[n('<p><img src="'+s+'" alt="大千世界无奇不有，大千AI智探万象"></p><h1 id="深度解密-大模型真的会思考吗" tabindex="-1">深度解密: 大模型真的会思考吗 <a class="header-anchor" href="#深度解密-大模型真的会思考吗" aria-label="Permalink to &quot;深度解密: 大模型真的会思考吗&quot;">​</a></h1><blockquote><p>当ChatGPT或DeepSeek流畅地回答你的问题，甚至生成JSON、调用工具时，你是否以为它真的在“思考”？</p></blockquote><blockquote><p>如果你回答 “是” 的话，那么你...</p></blockquote><p><img src="'+l+`" alt="too-young-too-naive"></p><blockquote><p>事情的真相是——它只是在玩一场高级的“字符串拼图”游戏。今天，我们深度解密LLM输出的本质，看看它如何把冰冷的数字变成结构化的输出从而实现智能交互。</p></blockquote><h2 id="神经网络" tabindex="-1">神经网络 <a class="header-anchor" href="#神经网络" aria-label="Permalink to &quot;神经网络&quot;">​</a></h2><p>我们知道现在的LLM本质上都是各种复杂的数学公式<code>y = f(x)</code>, 底层实现都是各种各样的神经网络(Neural Network)，不管是什么架构的神经网络都可以抽象为对输入数据的一种计算变换。</p><p>而要想计算，那参与计算的必然是某种量化的可计算的数值，就像<code>1, 2, 3, 1.4, 2.1</code>一样，输出也是一样的。当然神经网络的输入数据和输出数据没有这么简单，而是高维向量。</p><p>那为什么我们看到的输出是文本的，怎么办？那就是Embedding干的事情，简单来讲它可以在文本和高维向量之间相互转换。</p><h3 id="embedding" tabindex="-1">Embedding <a class="header-anchor" href="#embedding" aria-label="Permalink to &quot;Embedding&quot;">​</a></h3><p>每次的问题在真的被送到LLM时，都需要先进行Embedding，转换为高维向量。而LLM的每一次输出，本质都是高维向量（Embedding）的概率采样。模型接收输入后，在巨大的参数空间里计算下一个词的概率分布，最终输出一串Token ID（如[203, 57281, 3341...]），再解码成人类可读的文本。</p><h3 id="从embedding到文本-llm的-翻译-过程" tabindex="-1">从Embedding到文本：LLM的“翻译”过程 <a class="header-anchor" href="#从embedding到文本-llm的-翻译-过程" aria-label="Permalink to &quot;从Embedding到文本：LLM的“翻译”过程&quot;">​</a></h3><ol><li>从Embedding到文本：LLM的“翻译”过程 LLM的每一次输出，本质都是高维向量（Embedding）的概率采样。模型接收输入后，在巨大的参数空间里计算下一个词的概率分布，最终输出一串Token ID（如[203, 57281, 3341...]），再解码成人类可读的文本。</li></ol><p>关键点：</p><p>温度（Temperature）：调整输出的随机性，本质是控制概率采样的“激进”程度。</p><p>结构化输出：当你要求“返回JSON格式”时，模型其实在预测{、&quot;key&quot;、:等符号的概率，确保语法正确。</p><h3 id="一、技术本质-embedding矩阵的-变形记" tabindex="-1">一、技术本质：Embedding矩阵的&quot;变形记&quot; <a class="header-anchor" href="#一、技术本质-embedding矩阵的-变形记" aria-label="Permalink to &quot;一、技术本质：Embedding矩阵的&quot;变形记&quot;&quot;">​</a></h3><ol><li><p><strong>热力学视角的AI</strong><br> &quot;每个LLM输出本质上都是概率空间里的向量漂流——温度系数τ不过是给embedding矩阵加的热噪声&quot;<br> （用物理学类比降低理解门槛）</p></li><li><p><strong>从数字到文字的魔幻翻译</strong></p><ul><li>展示OpenAI API原始响应片段：<code>{&quot;tokens&quot;: [203, 57281, 3341...]}</code></li><li>可视化Embedding矩阵→Token→字符的转换过程<br> （代码级硬核内容）</li></ul></li><li><p><strong>结构化输出的技术黑箱</strong><br> &quot;当你要求&#39;用JSON格式回答&#39;时，模型其实在：<br> (1) 预测左大括号概率<br> (2) 预测&#39;response&#39;键名概率<br> (3) 递归生成合规语法结构&quot;<br> （逆向工程思维）</p></li></ol><hr><h3 id="二、行业反思-结构化的商业魔法" tabindex="-1">二、行业反思：结构化的商业魔法 <a class="header-anchor" href="#二、行业反思-结构化的商业魔法" aria-label="Permalink to &quot;二、行业反思：结构化的商业魔法&quot;">​</a></h3><p><strong>争议点</strong>：<br> &quot;为什么所有AI公司都在强推JSON输出？这本质是：</p><ul><li>对传统软件体系的妥协（解析成本↓）</li><li>对投资人讲的故事（&quot;看！它能对接ERP！&quot;）</li><li>对技术短板的掩饰（结构化≠真逻辑）&quot;</li></ul><p><strong>最新案例</strong>：<br> 分析Google DeepMind最新论文《Structured Generation as Diffusion Process》如何用扩散模型优化JSON生成（蹭学术热点）</p><hr><h3 id="三、实战演示-用python-解剖-gpt" tabindex="-1">三、实战演示：用Python&quot;解剖&quot;GPT <a class="header-anchor" href="#三、实战演示-用python-解剖-gpt" aria-label="Permalink to &quot;三、实战演示：用Python&quot;解剖&quot;GPT&quot;">​</a></h3><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> openai</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">response </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> openai.ChatCompletion.create(</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">    model</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;gpt-4&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">    messages</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[{</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;role&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;user&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;content&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;用JSON输出北京上海GDP对比&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}],</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">    response_format</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;type&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;json_object&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 关键控制参数</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(response.choices[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">].message.content) </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 输出：{&quot;cities&quot;: [{&quot;name&quot;: &quot;北京&quot;, &quot;gdp&quot;: &quot;4.3万亿&quot;},...]}</span></span></code></pre></div><p>（可执行代码增加实操价值）</p><hr><h3 id="四、未来畅想-超越字符串的次世代交互" tabindex="-1">四、未来畅想：超越字符串的次世代交互 <a class="header-anchor" href="#四、未来畅想-超越字符串的次世代交互" aria-label="Permalink to &quot;四、未来畅想：超越字符串的次世代交互&quot;">​</a></h3><p><strong>大胆预言</strong>：<br> &quot;当多模态embedding成熟时，LLM的输出将是：</p><ul><li>直接生成可执行Wasm字节码</li><li>输出数学公式的LaTeX+数值计算树</li><li>返回3D模型的参数化数据结构&quot;</li></ul><p><strong>读者互动</strong>：<br> &quot;你认为AI最终会进化出非文本的&#39;原生思维语言&#39;吗？<br> A) 会，字符串只是过渡<br> B) 不会，人类文明基于文本<br> C) 我是AI，我选C&quot;<br> （制造话题性）</p><hr><p><strong>结尾钩子</strong>：<br> &quot;下期预告：我们用频谱分析仪抓取LLM推理时的电磁泄漏，发现当它生成&#39;作为AI我无法...&#39;时——功耗骤降30%！这究竟是伦理约束...还是偷懒省电？&quot;<br> （埋设悬念）</p><hr><p>这篇文章融合了：</p><ol><li>技术深度（embedding/JSON生成原理）</li><li>行业批判（商业化包装的真相）</li><li>热点结合（GPT-4o/Google论文）</li><li>互动设计（投票+下期预告）</li></ol><p>需要调整任何部分或补充具体技术细节请随时告知。</p>`,39)]))}const b=t(o,[["render",p]]);export{q as __pageData,b as default};
